

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;

import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   	boolean errorDetected;
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with{:
	errorDetected = false;

:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LEFT_ROUND_BRACKET, RIGHT_ROUND_BRACKET, SEMI, LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET, EQUAL, RETURN, COMMA, VOID;
terminal Integer NUMBER;
terminal String IDENT;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;
terminal NEW;
terminal findAny;

terminal COLON;
terminal ASSIGNMENT;
terminal MULTIPLY;
terminal MODUO;
terminal RIGHT_CURLY_BRACKET, LEFT_CURLY_BRACKET;
terminal PLUS;
terminal MINUS;
terminal NOT_EQUAL;
terminal CONST;
terminal AND;
terminal LESS;
terminal READ;
terminal PRINT;
terminal INC;
terminal GREATER;
terminal GREATER_EQUAL;
terminal LESS_EQUAL;
terminal DO;
terminal POINT;
terminal OR;
terminal DEC;
terminal DIVIDE;

nonterminal AllDeclarationsList, MethodDeclList;
nonterminal FormalParamList;
nonterminal Relop, Addop, Mulop, Assignop;
nonterminal VarDeclList, VarDecl, VarDeclType, LastVarDecl, VarDeclBrackets;
nonterminal ConstDecl, ConstDeclLine, ConstDeclList, MoreConstDecl;
nonterminal MethodVarDecl;
nonterminal ProgDeclList;
nonterminal PrintArgs;
nonterminal Label;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodType, Designator, Statement, DesignatorStatement, DesignatorArray;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, MethodReturnType, Expr, Term, Factor, ConstFactor,
ActualPars, ActualParamList, StatementList, DesignatorList, DesignatorLine, FormPars, FormalParamDecl, DesignatorStatmentMore;

Program ::= (Program) PROG  ProgName AllDeclarationsList LEFT_CURLY_BRACKET MethodDeclList RIGHT_CURLY_BRACKET;

ProgName ::= (ProgName) IDENT:progName;

AllDeclarationsList  ::= (ConstDeclarations) AllDeclarationsList ConstDecl
						|
						(VarDeclarations) AllDeclarationsList  VarDecl
						|
						(NoDecl) /* epsilon */
						;

ConstDecl ::= (ConstDecl) CONST Type:constType ConstDeclLine SEMI;

VarDecl ::= (VarDecl) Type VarDeclList SEMI;


ConstDeclLine ::= (ConstDeclarationLine) MoreConstDecl ConstDeclLine
				|
 				(SingleConstValue) ConstDeclList  /* epsilon */
 				;

MoreConstDecl ::= (MoreConst) ConstDeclList COMMA
				|
				(ErrorConstStmt) error COMMA:l
			   	{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
			   	;

ConstDeclList ::= (IntegerConstValue) IDENT:constName ASSIGNMENT NUMBER:numberConstValue
 				|
 				(CharConstValue) IDENT:constName ASSIGNMENT CHAR_CONST:charConstValue
 				|
 				(BoolConstValue) IDENT:constName ASSIGNMENT BOOL_CONST:boolConstValue
 				|
 				(NoConstValue) /* epsilon */
 				;


VarDeclList ::= (MoreVarList) VarDeclList COMMA LastVarDecl
			|
			(SingleVarDecl) LastVarDecl 
			|
			(ErrorVarDeclStmt) error COMMA:l
			{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		    ;
		   
LastVarDecl ::= (LastVar) IDENT:varName VarDeclBrackets
               | 
               (ErrorLastVarDecl) SEMI:l
               {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :}
               ;


VarDeclBrackets ::= (VarDeclArray) LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
					|
				  	(VariableIsNotArray) /* epsilon */
				  	;

Type ::= (Type) IDENT:typeName;


MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) MethodType LEFT_ROUND_BRACKET FormPars RIGHT_ROUND_BRACKET MethodVarDecl LEFT_CURLY_BRACKET StatementList RIGHT_CURLY_BRACKET;

MethodType ::= (MethodType) MethodReturnType IDENT:methName;

MethodReturnType ::= (VoidType) VOID
					|
					(ConcreteType) IDENT:retTypeName
					 ;

MethodVarDecl ::= (MethodHasVariables) MethodVarDecl VarDecl
				  |
				  (MethodHasNotVariables) /* epsilon */
				  ;
  
FormPars ::= (FormParams) FormalParamList:formalList
		  |
		  (NoFormParam) /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamList COMMA FormalParamDecl:formalParam
				|
				(SingleFormalParamDecl) FormalParamDecl:formalParam
				;
				
FormalParamDecl ::= (FormalParamDeclaration) Type:paramType IDENT:parmName VarDeclBrackets;

StatementList ::= (MoreStatements) StatementList Statement:s
				|
				(NoStmt) /* epsilon */
				;

Statement ::= (DesigStatment) DesignatorStatement SEMI
				|
				(ReturnExpr) RETURN Expr:e SEMI
				|
				(ReturnNoExpr) RETURN SEMI
				|
				(ReadStatment) READ LEFT_ROUND_BRACKET Designator RIGHT_ROUND_BRACKET SEMI
				|
				(PrintStatment) PRINT LEFT_ROUND_BRACKET Expr PrintArgs RIGHT_ROUND_BRACKET SEMI
				|
				(FindAny) Designator EQUAL Designator POINT findAny LEFT_ROUND_BRACKET Expr RIGHT_ROUND_BRACKET SEMI
				|
				(MoreStatments) LEFT_CURLY_BRACKET Statement RIGHT_CURLY_BRACKET
				;
				
PrintArgs ::= (ArgumentsForPrint) COMMA NUMBER 
			|
			(NoArgumentsForPrint) /* epsilon */
			;
					
DesignatorStatement ::= (DesStatmentAssign) Designator:desVar ASSIGNMENT Expr:e
						|						
						(DesStatmentInc) Designator:desVar INC
						|
						(DesStatmentDec) Designator:desVar DEC
						|
						(DesStatmentmMulti) DesignatorStatmentMore
						|						
						(ErrorInDesStatment) error SEMI:l
						{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null); :}
						|
						(DesStatmentFunc) Designator:func LEFT_ROUND_BRACKET ActualPars RIGHT_ROUND_BRACKET
						;
						

DesignatorStatmentMore ::= (DesStatmentMore) LEFT_SQUARE_BRACKET DesignatorList RIGHT_SQUARE_BRACKET ASSIGNMENT Designator;

DesignatorList ::= (DesignatorMany) DesignatorLine:d COMMA DesignatorList
				|
				(NoDesignatorList) DesignatorLine:d
				;
			
				
DesignatorLine ::= (OneDesignator) Designator:desig
				|
				(NoDesignatore) /* epsilon */;
			
Expr ::= (OneNegTermExpr) MINUS Term:t
	 	|
	 	(AddExpr) Expr:te Addop Term:t
	 	|
	 	(OneTermExpr) Term:t
	 	;

Term ::= (TermMul) Term:t Mulop Factor:f
		|
		(TermFact) Factor:f
		;
		

Factor ::=  
		(FactorConst) ConstFactor
		|
		(FactorVariable) Designator
		| 
		(ExprCall) LEFT_ROUND_BRACKET Expr:e RIGHT_ROUND_BRACKET
		|
		(NewCallWithPar) NEW Type:nameType LEFT_SQUARE_BRACKET Expr:index RIGHT_SQUARE_BRACKET
		|
		(FuncCall) Designator:func LEFT_ROUND_BRACKET ActualPars RIGHT_ROUND_BRACKET
		;
		
ConstFactor ::=  
		(NumConst) NUMBER:valNum
		|
		(CharConst) CHAR_CONST:valChar
		|
		(BoolConst) BOOL_CONST:valBool
		;
		
ActualPars ::= (Actuals) ActualParamList:list
			|
			(NoActuals) /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr:e
				|
				(ActualParam) Expr:e
				;
				
Designator ::= (DesignatorOnly) IDENT:designatorName
				|
				(ExprDesignator) DesignatorArray:desArray LEFT_SQUARE_BRACKET Expr:expresion RIGHT_SQUARE_BRACKET
				;

DesignatorArray ::= (DesignatorArray)  Designator:designatorArray;
			
		/*
		|
		(SemiStartingDesignator) SEMI IDENT:name za klase samo valjda
		*/

Label ::= (LabelStatmnt) IDENT:labelName;

Relop ::= (EqualOp) EQUAL
		|
		(NotEqualOp) NOT_EQUAL
		|
		(GreaterOP) GREATER
		|
		(GreaterEqualOp) GREATER_EQUAL
		|
		(LessOp) LESS
		|
		(LessEqualOp) LESS_EQUAL
		;

Addop ::= (PlusOp) PLUS
		|
		(MinusOp) MINUS
		;

Mulop ::= (MultplyOp) MULTIPLY
		|
		(DivideOp) DIVIDE
		|
		(ModuoOp) MODUO
		;
		
Assignop ::= ASSIGNMENT;
