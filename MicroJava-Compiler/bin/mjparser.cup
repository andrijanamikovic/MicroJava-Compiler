

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LEFT_ROUND_BRACKET, RIGHT_ROUND_BRACKET, SEMI, LEFT_SQUARE_BRACKET, RIGHT_SQUARE_BRACKET, EQUAL, RETURN, PLUS, COMMA, PRINT, VOID;
terminal Integer NUMBER;
terminal String IDENT;
terminal Character CHAR_CONST;
terminal Boolean BOOL_CONST;
terminal findAny;

terminal COLON;
terminal ASSIGNMENT;
terminal MULTIPLY;
terminal MODUO;
terminal RIGHT_CURLY_BRACKET, LEFT_CURLY_BRACKET;
terminal MINUS;
terminal NOT_EQUAL;
terminal CONST;
terminal AND;
terminal LESS;
terminal READ;
terminal INC;
terminal GREATER;
terminal GREATER_EQUAL;
terminal LESS_EQUAL;
terminal DO;
terminal POINT;
terminal OR;
terminal DEC;
terminal DIVIDE;

nonterminal Program, ProgName, AllDeclarationsList, MethodDeclList, Type, MethodDecl;
nonterminal FormPars, StatementList, FormalParamList, FormalParamDecl, Statement;
nonterminal Designator, Expr, Term, Factor, ActualPars, ActualParamList;
nonterminal Relop, Addop, Mulop;
nonterminal VarDeclList, VarDecl, VarDeclType, LastVarDecl, VarDeclBrackets;
nonterminal ConstDecl, ConstDeclLine, ConstDeclList, MoreConstDecl;
nonterminal MethodType, MethodReturnType, MethodVarDecl;
nonterminal ProgDeclList , MoreVarDecl;
nonterminal DesignatorStatement, ForEachLabel, PrintArgs;
nonterminal Assignop, Label;


Program ::= (Program) PROG  ProgName AllDeclarationsList LEFT_CURLY_BRACKET MethodDeclList RIGHT_CURLY_BRACKET;

ProgName ::= (ProgName) IDENT:progName;

AllDeclarationsList  ::= (ConstDeclarations) AllDeclarationsList ConstDecl
						|
						(VarDeclarations) AllDeclarationsList  VarDecl
						|
						(NoDecl) /* epsilon */
						;

ConstDecl ::= (ConstDecl) CONST Type:constType ConstDeclLine SEMI;
VarDecl ::= (VarDecl) Type:varType VarDeclList SEMI;





ConstDeclLine ::= (ConstDeclarationLine) MoreConstDecl ConstDeclLine
					|
 					(SingleConstValue) ConstDeclList  /* epsilon */
 					;

MoreConstDecl ::= (MoreConst) ConstDeclList COMMA
					|
					(ErrorConstStmt) error COMMA:l
			   		{: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :};

ConstDeclList ::= (IntegerConstValue) IDENT:constName ASSIGNMENT NUMBER:numberConstValue
 				|
 				(CharConstValue) IDENT:constName ASSIGNMENT CHAR_CONST:charConstValue
 				|
 				(BoolConstValue) IDENT:constName ASSIGNMENT BOOL_CONST:boolConstValue
 				|
 				(NoConstValue) /* epsilon */
 				;


VarDeclList ::= (MoreVarList) MoreVarDecl COMMA VarDeclList 
			|
			(SingleVarDecl) LastVarDecl 
		    ;
		    
MoreVarDecl ::= (MoreVar)  IDENT:varName VarDeclBrackets 
				|
			   (ErrorVarStmt) error COMMA:l
			   {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :};
		   
LastVarDecl ::= (LastVar) IDENT:varName VarDeclBrackets
               | 
               (ErrorLastVarDecl) SEMI:l
                  {: parser.report_error("Izvrsen oporavak do ; u liniji " + lleft, null);  :};


VarDeclBrackets ::= (VarDeclArray) LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
					|
				  	(VariableIsNotArray) /* epsilon */
				  	;

Type ::= (Type) IDENT:typeName;


MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (MethodDecl) MethodType LEFT_ROUND_BRACKET FormPars RIGHT_ROUND_BRACKET MethodVarDecl LEFT_CURLY_BRACKET StatementList RIGHT_CURLY_BRACKET;

MethodType ::= (MethodType) MethodReturnType IDENT:methName;

MethodReturnType ::= (VoidType) VOID
					|
					(ConcreteType) Type:retType
					 ;

MethodVarDecl ::= (MethodHasVariables) MethodVarDecl VarDecl
				  |
				  (MethodHasNotVariables) /* epsilon */
				  ;
  
FormPars ::= (FormParams) FormalParamList
		  |
		  (NoFormParam) /* epsilon */
		  ;
		  
FormalParamList ::= (FormalParamDecls) FormalParamDecl COMMA FormalParamList
				|
				(SingleFormalParamDecl) FormalParamDecl
				;
				
FormalParamDecl ::= (FormalParamDeclaration) Type:paramType IDENT:parmName VarDeclBrackets;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;

Statement ::= (DesigStatment) DesignatorStatement SEMI
				|
				(ReadStatment) READ LEFT_ROUND_BRACKET Designator RIGHT_ROUND_BRACKET SEMI
				|
				(PrintStatment) PRINT LEFT_ROUND_BRACKET Expr PrintArgs RIGHT_ROUND_BRACKET SEMI
				|
				(FindAny) Designator EQUAL Designator POINT findAny LEFT_ROUND_BRACKET Expr RIGHT_ROUND_BRACKET SEMI
				|
				(MoreStatments) LEFT_CURLY_BRACKET Statement RIGHT_CURLY_BRACKET
				;

PrintArgs ::= (ArgumentsForPrint) COMMA NUMBER 
			|
			(NoArgumentsForPrint)
			;
					
DesignatorStatement ::= (DesStatmentAssign) Designator Assignop Expr 
						| 
						(DesStatmentInc) Designator INC
						|
						(DesStatmentDec) Designator DEC
						;
				

Expr ::= (AddExpr) Expr:te Addop Term:t
		|
	 	(IntTermExpr) MINUS Term:t
	 	|
	 	(TermExpr) Term:t
	 	;

Term ::= (TermFact) Factor:t
		|
		(TermMul) Term Mulop Factor:t
		;
		

Factor ::= (NumConst) NUMBER
		|
		(CharConst) CHAR_CONST
		|
		(BoolConst) BOOL_CONST
		|
		(Var) Designator:d
		| 
		(FuncCall) Designator:func LEFT_ROUND_BRACKET ActualPars RIGHT_ROUND_BRACKET
		|
		(ExprCall) LEFT_ROUND_BRACKET Expr RIGHT_ROUND_BRACKET
		;
		/*
		|
		(NewCallWithExpr) NEW Type LEFT_SQUARE_BRACKET Expr RIGHT_SQUARE_BRACKET
		|
		(NewCallWithPar) NEW Type LEFT_SQUARE_BRACKET ActualPars RIGHT_SQUARE_BRACKET */
		
ActualPars ::= (Actuals) ActualParamList
			|
			(NoActuals) /* epsilon */
			;
		
ActualParamList ::= (ActualParams) ActualParamList COMMA Expr
				|
				(ActualParam) Expr
				;
				
Designator ::= (DesignatorName) IDENT:name
			|
			(SemiStartingDesignator) SEMI IDENT:name
			|
			(ExprDesignator) LEFT_SQUARE_BRACKET Expr RIGHT_SQUARE_BRACKET
			;

Label ::= (LabelStatmnt) IDENT:labelName;

Assignop ::= (Assign) ASSIGNMENT;

Relop ::= (EqualOp) EQUAL
		|
		(NotEqualOp) NOT_EQUAL
		|
		(GreaterOP) GREATER
		|
		(GreaterEqualOp) GREATER_EQUAL
		|
		(LessOp) LESS
		|
		(LessEqualOp) LESS_EQUAL
		;

Addop ::= (PlusOp) PLUS
		|
		(MinusOp) MINUS
		;

Mulop ::= (MultplyOp) MULTIPLY
		|
		(DivideOp) DIVIDE
		|
		(ModuoOP) MODUO
		;
		
